name: Release

on:
  push:
    branches:
      - UpdateReleaseYaml

jobs:
  #bump_version_tag:
  #  name: Bump version and push tag
  #  runs-on: ubuntu-latest
  #  outputs:
  #    new_tag: ${{ steps.create_tag.outputs.new_tag }}
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v2
  #    with:
  #      fetch-depth: '0'
  #  - name: Execute action anothrNick/github-tag-action
  #    id: create_tag
  #    uses: anothrNick/github-tag-action@1.26.0
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      WITH_V: true
  #      DEFAULT_BUMP: patch

  #test:
  #  name: Test
  #  runs-on: ubuntu-latest
  #  env:
  #    dotnet-version: 5.0.x
  #    url: /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/

  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2
  #    - name: Setup .NET Core SDK ${{ env.dotnet-version }}
  #      uses: actions/setup-dotnet@v1
  #      with:
  #        dotnet-version: ${{ env.dotnet-version }}
  #    - name: Install dependencies
  #      run: dotnet restore
  #    - name: Build
  #      run: dotnet build --configuration Release --no-restore
  #    - name: Test
  #      run: dotnet test --no-restore --verbosity normal --no-build 

  build:
    #needs: [test]
    name: Build and release
    runs-on: ubuntu-latest
    env:
      dotnet-version: 5.0.x
      url: /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/
    #strategy:
    #  matrix:
    #    dotnet-version: [ '5.0.x' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ env.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
      - name: Publish
        run: |
         # mkdir publish #lightweightubunt
          # dotnet publish Blue10CLI.csproj -c Release -r win-x64 --no-restore -p:PublishReadyToRun=false -p:PublishSingleFile=true --self-contained true -o  ${{ github.workspace }}/Blue10CLI/bin/Release/net5.0/win-x64/publish/cli
          # dotnet publish Blue10CLIHeadless.csproj -c Release -r win-x64 --no-restore -p:PublishReadyToRun=false -p:PublishSingleFile=true --self-contained true -o  ${{ github.workspace }}/Blue10CLI/bin/Release/net5.0/win-x64/publish/headless
          
          #cp README.md publish #bin/Release/net5.0/win-x64/publish
          #cd  ${{ github.workspace }}/Blue10CLI/bin/Release/net5.0/win-x64/publish
          zip Blue10CLI README.md

      #- name: Upload dotnet publish as artifacts
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: Blue10CLI #-${{ matrix.dotnet-version }}
      #    path:  ${{ github.workspace }}/Blue10CLI/publish #Blue10CLI/bin/Release/net5.0/win-x64/publish/
      


      #- name: Build project # This would actually build your project, using zip for an example artifact
      #  run: |
      #    zip --junk-paths my-artifact README.md
      #    cd /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/
      #    dotnet publish Blue10CLI.csproj -c Release -r win-x64 -p:PublishReadyToRun=false -p:PublishSingleFile=true --self-contained true -o /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/bin/Release/net5.0/win-x64/publish/cli
      #    dotnet publish Blue10CLIHeadless.csproj -c Release -r win-x64 -p:PublishReadyToRun=false -p:PublishSingleFile=true --self-contained true -o /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/bin/Release/net5.0/win-x64/publish/headless
      #    cp /home/runner/work/Blue10CLI/Blue10CLI/README.md /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/bin/Release/net5.0/win-x64/publish
      #    cd /home/runner/work/Blue10CLI/Blue10CLI/Blue10CLI/bin/Release/net5.0/win-x64/publish
      #    zip -r Blue10CLI.zip

  #release:
  #  name: Release
  #  runs-on: ubuntu-latest
  #  steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.2.3.4
          release_name: Release1234 #${{ github.ref }}
          draft: false
          prerelease: false

      #- name: Get artifacts
      #  #env:
      #  #  DOTNET_ROOT: /home/runner/.dotnet/
      #  id: artifacts
      #  uses: actions/download-artifact@v2
      #  with:
      #      name: Blue10CLI
      #      path:  ~/download/path

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Blue10CLI.zip
          asset_name: Blue10CLI.zip
          asset_content_type: application/zip
